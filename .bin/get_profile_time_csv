#!/usr/bin/env python3

import os
import subprocess
from pathlib import Path
import hashlib

HEADERS = 'dirmd5,NBTime,rank,PE,N,Total,Inti.,Intgrt,Reg.,Irr.,Predall,Pred.,Init.B.,Mdot,Move,Comm.I.,Comm.R.,Send.I.,Send.R.,KS,Adjust,OUT,Barr.,Barr.P.,Barr.I.,Barr.R.,Reg.GPU.S,Reg.GPU.P,Comm.Adj.,Mdot.Fic.,Mdot.Fc.,Mdot.Pot.,Mdot.EC.,Sort.B.,HighV,KS.Init.B,KS.Int.S,KS.Int.P,KS.Comm.,KS.Barr.,KS.Move,KS.Cmb.,KS.Insert,KS.Init.,KS.Term.,Hiar.,KS.UP,KS.TP,TIDES3,GRRAD,xtsub1,xtsub2,xnirrf,xnpred,itides3,igrrad,jobid,node,mpi,gpu,other_labels'

# Paths for output files
home = Path.home()
myr_file = home / ".myr.txt"
time_file = home / ".time.txt"
output_file = home / "time_to_csv.txt"

# Step 1: Find files matching the pattern and sort them by modification time
find_command = ["find", ".", "-name", "N*.out", "-exec", "stat", "--format=%Y %n", "{}", "+"]
find_output = subprocess.check_output(find_command, text=True)

# Parse and sort the find output
files = [line.split(maxsplit=1)[1] for line in sorted(find_output.splitlines())]

# Compute file dir identifiers (MD5 hash of absolute paths)
def get_file_identifier(file_path):
    abs_path = Path(file_path).resolve()
    md5_hash = hashlib.md5(str(os.path.dirname(abs_path)).encode()).hexdigest()
    return md5_hash[:6]

# Step 2: Process each file with grep and capture results
result = []
for file in files:
    try:
        grep_output = subprocess.check_output(
            ["grep", "ADJUST", "-A4", "-H", file], text=True
        )
        result.append(grep_output)
    except subprocess.CalledProcessError:
        # Ignore files where grep finds no match
        continue

result_text = "\n".join(result)

# Step 3: Extract "TIME" values and write to ~/.myr.txt
simu_identifiers = []
time_values = []
for line in result_text.splitlines():
    if "TIME" in line:
        filepath = line.split(":")[0]
        simu_identifiers.append(get_file_identifier(filepath))
        tokens = line.split()
        for i, token in enumerate(tokens):
            if token == "TIME":
                try:
                    time_value = float(tokens[i + 1])
                    time_values.append(f"{time_value:.1f}")
                except (IndexError, ValueError):
                    pass

myr_file.write_text("\n".join(time_values) + "\n")

# Step 4: Extract specific patterns and process with `time_to_csv.py`
pattern = "0.00E+00  0.00E+00"
pattern_matches = [line for line in result_text.splitlines() if pattern in line]
time_to_csv_input = "\n".join(pattern_matches)

# Write matches to time_file and process it
with time_file.open("w") as f:
    subprocess.run(["time_to_csv.py"], input=time_to_csv_input, text=True, stdout=f)

# Step 5: Combine the 3 parts into a CSV
with open(output_file, "w") as out_f:
    out_f.write(HEADERS + "\n")
    with myr_file.open() as myr_f, time_file.open() as time_f:
        for myr_line, time_line, md5 in zip(myr_f, time_f, simu_identifiers):
            out_f.write(f"{md5},{myr_line.strip()},{time_line.strip()}\n")

# Step 6: Display the output file with `less`
subprocess.run(["less", str(output_file)])

